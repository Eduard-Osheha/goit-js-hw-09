{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAoCA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA3CbQ,KAAO,CACLC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASG,kBAAkB,SACvCC,UAAWJ,SAASG,kBAAkB,QACtCE,YAAaL,SAASG,kBAAkB,UACxCG,UAAWN,SAASC,cAAc,WAGpCH,KAAKQ,UAAUC,iBAAiB,SAGhC,SAAkBC,GAChBA,EAAEC,iBAED,MAAMC,EAAsBZ,KAAKO,YAAY,GAAGM,MAC1CC,EAAOd,KAAKM,UAAU,GAAGO,MACzBE,EAAaf,KAAKI,WAAW,GAAGS,MAGvC,IAAK,IAAIG,EAAI,EAAGA,GAAKJ,EAAqBI,GAAK,EAAG,CAChD,IAAIC,EAAWD,EACXE,EAAQC,OAAOJ,GAAcI,OAAOL,IAASG,EAAW,GAE7D3B,EAAc2B,EAAUC,GACpBE,MAAK,EAAC7B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAAiC,OAAOC,QAAQ,qBAAqB/B,QAAeC,MAAU,IAE9D+B,OAAM,EAAChC,SAAEA,EAAQC,MAAEA,MAClBJ,EAAAiC,OAAOG,QAAQ,oBAAoBjC,QAAeC,MAAU,G,CAGlEQ,KAAKC,KAAKwB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nrefs = {\n  form: document.querySelector('.form'),\n  delayInput: document.getElementsByName('delay'),\n  stepInput: document.getElementsByName('step'),\n  amountInput: document.getElementsByName('amount'),\n  submitBtn: document.querySelector('button'),\n};\n\nrefs.submitBtn.addEventListener('click', onSubmit);\n\n\nfunction onSubmit(e) {\n  e.preventDefault();\n   \n   const qtyOfCreatedPromise = refs.amountInput[0].value;\n   const step = refs.stepInput[0].value;\n   const delayFirst = refs.delayInput[0].value; \n  let delay = 0;\n  \n  for (let i = 1; i <= qtyOfCreatedPromise; i += 1) {  \n    let position = i;\n    let delay = Number(delayFirst) + Number(step) * (position - 1);\n\n   createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });  \n  }\n  refs.form.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","refs","form","document","querySelector","delayInput","getElementsByName","stepInput","amountInput","submitBtn","addEventListener","e","preventDefault","qtyOfCreatedPromise","value","step","delayFirst","i","position1","delay1","Number","then","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.eb716338.js.map"}