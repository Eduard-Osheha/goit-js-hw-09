{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASG,kBAAkB,SACvCC,UAAWJ,SAASG,kBAAkB,QACtCE,YAAaL,SAASG,kBAAkB,UACxCG,UAAWN,SAASC,cAAc,WA6BpC,SAASM,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAnCPX,EAAKQ,UAAUW,iBAAiB,SAGhC,SAAkBC,GAChBA,EAAEC,iBAOF,IALC,IAAMC,EAAsBtB,EAAKO,YAAY,GAAGgB,MAC1CC,EAAOxB,EAAKM,UAAU,GAAGiB,MACzBE,EAAazB,EAAKI,WAAW,GAAGmB,MAG9BG,EAAI,EAAGA,GAAKJ,EAAqBI,GAAK,EAAG,CAChD,IAAIC,EAAWD,EACXE,EAAQC,OAAOJ,GAAcI,OAAOL,IAASG,EAAW,GAE7DlB,EAAckB,EAAUC,GACpBE,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBb,EAAAkC,OAAOC,QAAQ,qBAAoCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAE1DwB,OAAM,SAAAJ,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBb,EAAAkC,OAAOI,QAAQ,oBAAmCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAG9DX,EAAKC,KAAKoC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.getElementsByName('delay'),\n  stepInput: document.getElementsByName('step'),\n  amountInput: document.getElementsByName('amount'),\n  submitBtn: document.querySelector('button'),\n};\n\nrefs.submitBtn.addEventListener('click', onSubmit);\n\n\nfunction onSubmit(e) {\n  e.preventDefault();\n   \n   const qtyOfCreatedPromise = refs.amountInput[0].value;\n   const step = refs.stepInput[0].value;\n   const delayFirst = refs.delayInput[0].value; \n  let delay = 0;\n  \n  for (let i = 1; i <= qtyOfCreatedPromise; i += 1) {  \n    let position = i;\n    let delay = Number(delayFirst) + Number(step) * (position - 1);\n\n   createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });  \n  }\n  refs.form.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delayInput","getElementsByName","stepInput","amountInput","submitBtn","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","qtyOfCreatedPromise","value","step","delayFirst","i","position1","delay1","Number","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.24676574.js.map"}